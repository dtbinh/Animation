#include <GL/gl.h>
#include <GL/glut.h>
#include <sys/time.h>
#include <math.h>
#include <limits.h>
#include <iostream>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_access.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtx/transform.hpp>

#include "Arm.h"
#include "Basketball.h"
#include "Court.h"

using namespace std;
void displayCallback();

int glut_win, selected_light = 0;

Arm* height;
Basketball* basketball;
Court* court;

GLfloat redDiffuseMaterial[] = {1.0, 0.0, 0.0,1.0}; //set the material to red
GLfloat whiteSpecularMaterial[] = {1.0, 1.0, 1.0,1.0}; //set the material to white
GLfloat greenEmissiveMaterial[] = {0.0, 1.0, 0.0,1.0}; //set the material to green
GLfloat whiteSpecularLight[] = {1.0, 1.0, 1.0,1.0}; //set the light specular to white
GLfloat blackAmbientLight[] = {0.0, 0.0, 0.0,1.0}; //set the light ambient to black
GLfloat whiteDiffuseLight[] = {1.0, 1.0, 1.0,1.0}; //set the diffuse light to white
GLfloat blankMaterial[] = {0.0, 0.0, 0.0,1.0}; //set the diffuse light to white


const float INIT_SWING_ANGLE = 90.0f;
const float GRAVITY = 9.8; 
bool diffuse = false;
bool emissive = true;
bool specular = true;

glm::mat4 basketball_cf, height_cf, court_cf, light0_cf, light1_cf, camera_cf, spotlite_cf;

GLfloat eye[] = {200, 150, 80};

GLfloat light0_pos[] = {0, -5, 100,1.0};    
GLfloat light1_pos[] = {0, 5, 100,1.0};  
GLfloat light0_color[] = {1.0, 1.0, 1.0, 1.0};  


/*--------------------------------*
 * GLUT Reshape callback function *
 *--------------------------------*/
void light (void) {
  glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glLightfv (GL_LIGHT0, GL_POSITION, light0_pos);

  spotlite_cf = glm::rotate(spotlite_cf, +180.0f, 0.0f, 1.0f, 0.0f);
  spotlite_cf = glm::translate(spotlite_cf, 0.0f, 0.0f, 10.0f);


  glLightfv(GL_LIGHT1, GL_POSITION, glm::value_ptr(glm::column(spotlite_cf, 3)));
    glLightfv(GL_LIGHT1, GL_SPOT_DIRECTION, &glm::column(spotlite_cf, 2)[0]);

	glLightfv(GL_LIGHT0, GL_SPECULAR, whiteSpecularLight);
	glLightfv(GL_LIGHT0, GL_AMBIENT, blackAmbientLight);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, whiteDiffuseLight);

	glLightfv(GL_LIGHT1, GL_SPECULAR, whiteSpecularLight);
	glLightfv(GL_LIGHT1, GL_AMBIENT, blackAmbientLight);
	glLightfv(GL_LIGHT1, GL_DIFFUSE, whiteDiffuseLight);

	glMaterialfv(GL_FRONT_AND_BACK, GL_SPECULAR,whiteSpecularMaterial);
	
}

void reshapeCallback (int w, int h){
	glViewport (0, 0, w, h);
	glMatrixMode (GL_PROJECTION);
	glLoadIdentity ();
	gluPerspective (60, (float) w / (float) h, 5.0, 800.0);
	glMatrixMode (GL_MODELVIEW);
	glLoadIdentity ();
	gluLookAt (0, 75, 75, 0, 0, 0, 0, 0, 1);
	GLfloat mat[16];
	glGetFloatv (GL_MODELVIEW_MATRIX, mat);
}

/*================================================================*
 * Idle Callback function. This is the main engine for simulation *
 *================================================================*/
void idleCallback(){
	static clock_t last_timestamp = 0;
	static float swing_time = 0;
	clock_t current = clock();
	double delta;
	delta = 1000.0 * (current - last_timestamp)/CLOCKS_PER_SEC;
	if (delta < 75) { return; }
	basketball_cf = glm::rotate(basketball_cf, 20.0f, 0.0f, 1.0f, 0.0f);
	float angle = INIT_SWING_ANGLE * cos (swing_time * sqrt(height->length()/GRAVITY) * M_PI / 180.0);
	swing_time += 7.5;
	height_cf = glm::rotate(angle, 0.0f, 1.0f, 0.0f);
	last_timestamp = current;
	glutSetWindow (glut_win);
	glutPostRedisplay();
}

void myGLInit (){
	glPolygonMode (GL_FRONT, GL_FILL);
	glPolygonMode (GL_BACK, GL_FILL);
	glDisable(GL_DEPTH_TEST);
	glEnable(GL_CULL_FACE);
	glCullFace(GL_BACK);
	glEnable(GL_LIGHTING);
	glEnable(GL_NORMALIZE);
	glEnable(GL_COLOR_MATERIAL);
	glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
	glEnable(GL_LIGHT0);
	glEnable(GL_LIGHT1);
}

/*--------------------------------*
 * GLUT display callback function *
 *--------------------------------*/
void displayCallback (){
	light();

	glPushMatrix();
	glTranslatef (0, 0, -10);
	court->draw();
	glPopMatrix();

	glPushMatrix();
	glTranslatef (0, 0, 10);
	glMultMatrixf(&height_cf[0][0]);
	glMultMatrixf(&basketball_cf[0][0]);
	basketball->draw();
	glPopMatrix();

	glutSwapBuffers ();
}

void myModelInit (){
	court = new Court();
	court->newInstance();

	basketball = new Basketball();
	basketball->newInstance();
	basketball_cf = glm::translate(basketball_cf, 0.0f, 0.0f, -height->length());

	height = new Arm;
	height->newInstance();
	height->setColor(1.0, 0.65, 0.342);
	height_cf = glm::rotate(height_cf, INIT_SWING_ANGLE, 0.0f, 1.0f, 0.0f);
}

void keyHandler (unsigned char ch, int x, int y)
{
	switch (ch){
	case 0x1B: 
		exit (0);
		break;
	case 'l':
		if (glIsEnabled(GL_LIGHT0)){ glDisable(GL_LIGHT0); } else{ glEnable(GL_LIGHT0); }
		break;
	case 'L':
		if (glIsEnabled(GL_LIGHT1)){ glDisable(GL_LIGHT1); } else{ glEnable(GL_LIGHT1); }
		break;
	case 'x':
		basketball_cf = glm::translate(basketball_cf, 1.0f, 0.0f, 0.0f);
		break;
	case 'X':
		basketball_cf = glm::translate(basketball_cf, -1.0f, 0.0f, 0.0f);
		break;
	case 'y':
		basketball_cf = glm::translate(basketball_cf, 0.0f, 1.0f, 0.0f);
		break;
	case 'Y':
		basketball_cf = glm::translate(basketball_cf, 0.0f, -1.0f, 0.0f);
		break;
	case 'z':
		basketball_cf = glm::translate(basketball_cf, 0.0f, 0.0f, 1.0f);
		break;
	case 'Z':
		basketball_cf = glm::translate(basketball_cf, 0.0f, 0.0f, -1.0f);
		break;
	case 'm':
		glutIdleFunc (NULL);
		break;
	case 'M':
		glutIdleFunc (idleCallback);
		break;
	}
	glutPostRedisplay();
}

void fkeyHandler (int key, int x, int y)
{
	if (key == GLUT_KEY_F12)
		exit(0);
	int mod = glutGetModifiers();
	if (mod == GLUT_ACTIVE_SHIFT) {
		switch (key) {
		case GLUT_KEY_UP:
			glutIdleFunc (NULL);
			break;
		case GLUT_KEY_DOWN:
			glutIdleFunc (idleCallback);
			break;
		case GLUT_KEY_LEFT:
			basketball_cf = glm::rotate(basketball_cf, +20.0f, 0.0f, 1.0f, 0.0f);
			break;
		case GLUT_KEY_RIGHT:
			basketball_cf = glm::rotate(basketball_cf, -20.0f, 0.0f, 1.0f, 0.0f);
			break;
		}
	}
	else {
		switch (key) {
		case GLUT_KEY_F1:
			selected_light = 0;
			break;
		case GLUT_KEY_F2:
			selected_light = 1;
			break;
		case GLUT_KEY_UP: 
			basketball_cf = glm::translate(basketball_cf, 0.5f, 0.0f, 0.0f);
			break;
		case GLUT_KEY_DOWN: 
			basketball_cf = glm::translate(basketball_cf, -0.5f, 0.0f, 0.0f);
			break;
		case GLUT_KEY_LEFT:  
			basketball_cf = glm::rotate(basketball_cf, -20.0f, 1.0f, 0.0f, 0.0f);
			break;
		case GLUT_KEY_RIGHT: 
			basketball_cf = glm::rotate(basketball_cf, +20.0f, 1.0f, 0.0f, 0.0f);
			break;
		}
	}
	glutPostRedisplay();
}


int main (int argc, char **argv){
	glutInit (&argc, argv);
	glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize (600, 600); 
	glutInitWindowPosition (250, 250); 
	glut_win = glutCreateWindow ("Animation Project");
	srand (time(0));
	myGLInit ();
	myModelInit ();
	glutKeyboardFunc(keyHandler);
	glutSpecialFunc(fkeyHandler);
	glutIdleFunc (idleCallback);
	glutDisplayFunc (displayCallback);
	glutReshapeFunc (reshapeCallback);
	glutMainLoop ();
}
